<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>变分自动编码器</title>
      <link href="/myblog.github.io/2021/03/20/VAE/"/>
      <url>/myblog.github.io/2021/03/20/VAE/</url>
      
        <content type="html"><![CDATA[<h1 id="基于VAE的Mnist手写体图像生成笔记"><a href="#基于VAE的Mnist手写体图像生成笔记" class="headerlink" title="基于VAE的Mnist手写体图像生成笔记"></a>基于VAE的Mnist手写体图像生成笔记</h1><h2 id="1-判别模型与生成模型"><a href="#1-判别模型与生成模型" class="headerlink" title="1.判别模型与生成模型"></a>1.判别模型与生成模型</h2><p>在传统机器学习模型一般分为两类</p><h3 id="1-1-判别模型"><a href="#1-1-判别模型" class="headerlink" title="1.1 判别模型"></a>1.1 判别模型</h3><p>给定数据x, 比如一张图像.  标签y, 比如猫或者狗.   判别模型只在建模给定x后,对标签y的条件概率分布.  根据条件概率大小进行分类. 它可以用于各种分类任务.</p><p>判别任务具有更为直接和广泛的应用.</p><h3 id="1-2-生成模型"><a href="#1-2-生成模型" class="headerlink" title="1.2 生成模型"></a>1.2 生成模型</h3><p>通常假设数据x的产生, 服从一个有隐变量z控制的一个隐藏生成过程.  进而去建模数据x与隐变量z的联合概率分布.  从而根据z的先验分布p(z)–&gt;以及给定z后x的生成分布p(x|z), 对x进行采样, 生成新的数据样本.</p><p>生成模型更具趣味性, 因为他可以生成之前并不存在的样本. 它可以揭示数据背后的隐藏结构,从而展现机器的一个想象力, 拓宽人类的视野.</p><h2 id="2-基于深度学习的生成模型"><a href="#2-基于深度学习的生成模型" class="headerlink" title="2. 基于深度学习的生成模型"></a>2. 基于深度学习的生成模型</h2><p>随着深度学习的发展, 深度生成模型成为了当下的热点. 如今主流的生成模型主要分为两类: 生成对抗网络(GAN)和变分自编码器(VAE)</p><h3 id="2-1-生成对抗网络-GAN"><a href="#2-1-生成对抗网络-GAN" class="headerlink" title="2.1 生成对抗网络(GAN)"></a>2.1 生成对抗网络(GAN)</h3><p>生成网络与判别网络最小-最大化博弈, 从而在迭代的过程中, 生成网络可以骗过判别网络, 生成高质量的原始数据.   由于GAN基于博弈论的数学原理极为有趣, 它吸引了大量的研究.  由于它只能从隐变量的先验分布p(z)中随机采样生成新样本.  而不能表达给定x之后, 隐变量z的后验概率分布, 因此在应用中具有局限性.</p><h3 id="2-2-变分自编码器-VAE"><a href="#2-2-变分自编码器-VAE" class="headerlink" title="2.2 变分自编码器(VAE)"></a>2.2 变分自编码器(VAE)</h3><p>利用解码网络自下而上建模生成过程, 也就是给定z后, x的条件概率分布p(x|z)</p><p>利用编码网络自下而上的推理过程, 即给定x后的, z的后验概率</p><p>因此VAE的语义空间具有更加明显的语义结构, 它同时具有生成和推理的过程.  因此VAE在多项任务,比如说计算机视觉, 自然语言处理, 推荐系统方面具有广泛的应用.</p><h2 id="3-变分自编码器-VAE"><a href="#3-变分自编码器-VAE" class="headerlink" title="3.变分自编码器(VAE)"></a>3.变分自编码器(VAE)</h2><h3 id="3-1-生成过程-给定某一个z-利用其生成数据x"><a href="#3-1-生成过程-给定某一个z-利用其生成数据x" class="headerlink" title="3.1 生成过程(给定某一个z, 利用其生成数据x)"></a>3.1 生成过程(给定某一个z, 利用其生成数据x)</h3><p>假设隐变量z的先验p(z), 在没有给定任何数据的时候, 服从一个标准的正态分布.   现在假定给定z后, x服从条件概率分布p(x|z), 即可以由一个深度神经网络解码器(一个DNN)来表示, 该网络以theta作为其可训练权重, 以z作为输入.          当x是连续的实变量时, 我们可以假设它服从高斯分布, 从而将网络未加任何激活函数的原始输出作为高斯分布的均值.         当x是一个离散变量的时候, 我们可以假设它服从二元或者多元伯努利分布, 这时对网络的输出进行sigmoid或者softmax函数进行归一化, 可以作为该分布对应类别的概率.</p><h3 id="3-2推理过程-即给定某一个x-z的后验概率分布"><a href="#3-2推理过程-即给定某一个x-z的后验概率分布" class="headerlink" title="3.2推理过程(即给定某一个x, z的后验概率分布)"></a>3.2推理过程(即给定某一个x, z的后验概率分布)</h3><p>在给定上述隐变量z的先验概率p(z)以及数据x的生成概率p(x|z)之后, 给定一个样本x,对齐隐变量的推理P(z|x), 需要知道z的后验概率分布p(z|x),  而根据贝叶斯定理, 计算z的后验概率分布需要 x的边缘概率p(x)即归一化常数.    但是p(x)=fp(z)p(x|z)dz中的生成条件概率p(x|z)是由深度神经网络表示的, 是非线性的, 没有显式解, 因此, 该后验概率不可解!</p><h3 id="3-3-变分近似后验"><a href="#3-3-变分近似后验" class="headerlink" title="3.3 变分近似后验"></a>3.3 变分近似后验</h3><p>为了解决上述后验概率不可解的问题.  VAE假设存在一个q(z|x), 这里的权重参数为Ψ, 即编码器网络, 去近似不可解的后验.   VAE旨在从q(Ψ)中找到一个与上面的真实但不可解的后验概率分布p(这里参数为θ)的KL散度最小的一个分布, 作为它的一个近似.</p><h3 id="3-4-优化目标-最小化qΨ-z-x-与pθ-z-x-之间的KL散度"><a href="#3-4-优化目标-最小化qΨ-z-x-与pθ-z-x-之间的KL散度" class="headerlink" title="3.4 优化目标: 最小化qΨ(z|x)与pθ(z|x)之间的KL散度"></a>3.4 优化目标: 最小化qΨ(z|x)与pθ(z|x)之间的KL散度</h3><p>根据式1, 由于x的边缘分布p(x)中不含有隐变量z, 所以它是一个常数, 显然它不可解.    最小化KL散度等价于最大化后面这个式子L即式2, 因为KL散度是大于0的量, 所以L属于边缘分布对数的一个下界</p><p>根据式2即L表达式,  它由两个项组成, 其一是生成x概率的对数似然的期望,对其进行最大化,可以使得z能解释出现的数据x,从而约束隐空间的语义结构       其二是z的先验概率分布p(z)与z的后验概率分布的KL散度, 该项使得后验尽可能的去接近先验, 它作为正则化项控制编码器模型的复杂度.</p><h3 id="3-5-本文使用的网络结构"><a href="#3-5-本文使用的网络结构" class="headerlink" title="3.5 本文使用的网络结构"></a>3.5 本文使用的网络结构</h3><p>x是图像,  因此编码器网络首先采用卷积神经网络对图像进行特征提取, 同时在卷积层之间采用p归一化, 防止发生均值漂移,并且减轻过拟合的影响.  最后我们将后一个卷积层输出的特征图谱展开为一维,经过一个全连接层后, 分别用两个全连接层去预测隐变量的均值和方差.  为了使梯度能够正常的传递,VAE采用了重参数化技巧(即给定隐变量z的均值和标准差,我们首先从标准正态分布采到一个样本 ε,然后z=μ+σ*ε 作为z的样本进行前向传播).        在解码器中, 给定隐变量z的一个样本之后,通过全连接层将它映射到编码器最后一个卷积层输出特征图谱, 展开成为一维后的大小, 并将其reshape, 使其具有对应的空间维度, 接着解码器采用了一个解卷积层, 将特征图谱的空间分辨率提升到原来的大小. 最后解码器采用了以sigmoid为激活函数的卷积层还原得到原始数据x’</p><h1 id="VAE-另一项目"><a href="#VAE-另一项目" class="headerlink" title="VAE 另一项目"></a>VAE 另一项目</h1><p><a href="https://kexue.fm/archives/5253">gitee</a></p><p><a href="https://gitee.com/cao_yu_fei/vae_keras?_from=gitee_search#https://kexue.fm/archives/5253">vae_keras</a></p><h1 id="VAE-基于pytorch的项目"><a href="#VAE-基于pytorch的项目" class="headerlink" title="VAE 基于pytorch的项目"></a>VAE 基于pytorch的项目</h1><p><a href="https://gitee.com/xubinlee/VAE-CVAE-MNIST?_from=gitee_search">VAE-CVAE-MNIST</a></p><p><a href="https://gitee.com/piglittle/multi-level-vae?_from=gitee_search">multi-level-vae</a></p><p><a href="https://gitee.com/asdxyz1234/VAE?_from=gitee_search#https://github.com/AntixK/PyTorch-VAE/blob/master/models/vanilla_vae.py">有比较的全的vae源码</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架pytorch学习笔记</title>
      <link href="/myblog.github.io/2021/03/19/pytorch/"/>
      <url>/myblog.github.io/2021/03/19/pytorch/</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><h2 id="p1-人工神经网络与生物神经网络"><a href="#p1-人工神经网络与生物神经网络" class="headerlink" title="p1.人工神经网络与生物神经网络"></a>p1.人工神经网络与生物神经网络</h2><p>1.生物神经网络:数以万计的神经连接, 900亿的神经细胞组成了我们复杂的神经系统</p><p>2.记忆的形成: 生成了新的突触, 记忆就产生了.  但是形成的新连接怎么形成记忆仍然是科学界的一个迷.</p><p>3.人工神经网络: 比如Google的搜索引擎,股票价格预测,集成学习,家庭助手,围棋alphago</p><p>4.已经成体系的人工神经网络, 神经元之间的连接都是固定不可更换的. 也就是说在人工神经网络里没有凭空产生新连接这回事.  它靠的是正向和反向传播来更新神经元, 从而形成一个更好的神经系统. 本质上这是一个可以处理优化的数学模型. 而生物神经网络是信号刺激产生新的连接, 让信号能够通过新的连接形成反馈.</p><h2 id="p2-什么是神经网络"><a href="#p2-什么是神经网络" class="headerlink" title="p2.什么是神经网络"></a>p2.什么是神经网络</h2><p>1.能够在外界的信息的基础上改变内部的结构. 是一种自适应的过程.</p><p>2.神经网络是一种运算模型</p><h2 id="p3-神经网络-梯度下降"><a href="#p3-神经网络-梯度下降" class="headerlink" title="p3.神经网络:梯度下降"></a>p3.神经网络:梯度下降</h2><p>1.optimization优化问题: 它是人类历史上的重大突破, 它解决了很多生活中的问题</p><p>2.类别: Newton’s method      Least Squares method      Gradient Descent</p><h2 id="p4-神经网络的黑盒不黑-深度理解"><a href="#p4-神经网络的黑盒不黑-深度理解" class="headerlink" title="p4.神经网络的黑盒不黑(深度理解)"></a>p4.神经网络的黑盒不黑(深度理解)</h2><p>输入–&gt;加工–&gt;输出</p><p>加工的过程就是黑盒: 输入端,中间,输出端</p><p>每一层可以看成向量的线性变换或者非线性变换</p><p>黑盒加工处理: 将一种代表特征转换为另一种代表特征, 即一次次的特征转换, 一次次的更有深度的理解.   这里可以理解为把输入信息矩阵化,通过提取特征值或者做SVD之类的变换得到新的特征矩阵</p><p>称为黑盒的原因: 代表特征太多了, 人类无法看明白, 但是计算机可以看明白他们所学到的规律.</p><h2 id="p5-1-1-why使用pytorch"><a href="#p5-1-1-why使用pytorch" class="headerlink" title="p5 1.1 why使用pytorch"></a>p5 1.1 why使用pytorch</h2><p>pytorch是torch在python上衍生.  因为torch是一个使用Lua语言的神经网络库, torch很好用, 但是Lua又不是很流行,所以开发团队将Lua的Torch移植到更流行的语言python上.</p><p>pytorch是17年初才公开的模块.  tensorflow的一些概念静态图或者搭建流程图概念不是很理解.   但是使用pytorch更能诠释神经网络的工作流程, 性能和tensorflow差不多.</p><p>和tensorflow(静态模型)的区别: pytorch在搭建图的时候, 它不是先建好一个静态的流程图,然后在把数据放到流程图里面计算.   它是边输入数据边搭建图, 它是一个动态的过程.</p><h2 id="p6-1-2-安装"><a href="#p6-1-2-安装" class="headerlink" title="p6 1.2 安装"></a>p6 1.2 安装</h2><p>安装的时候安装了两个东西: 1.一个是pytorch的主模块  2.torchvision它是有一个数据库(图片), 有些训练好的网络</p><h2 id="p7-2-1-numpy和torch对比"><a href="#p7-2-1-numpy和torch对比" class="headerlink" title="p7 2.1 numpy和torch对比"></a>p7 2.1 numpy和torch对比</h2><p>numpy: 处理数据的模块, 处理矩阵, 使用你的多核来加速运算.  把array放在CPU中加速运算</p><p>Torch自称为神经网络界的Numpy, 因为它能将torch产生的tensor放在GPU中加速运算.</p><p>tensor是一个张量</p><h2 id="p8-2-2-variable变量"><a href="#p8-2-2-variable变量" class="headerlink" title="p8 2.2 variable变量"></a>p8 2.2 variable变量</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/DFS%E5%92%8CBFS%E7%AC%94%E8%AE%B0/"/>
      <url>/myblog.github.io/2021/03/18/DFS%E5%92%8CBFS%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/CAS%E5%8E%9F%E7%90%86/"/>
      <url>/myblog.github.io/2021/03/18/CAS%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis框架</title>
      <link href="/myblog.github.io/2021/03/18/Mybatis/"/>
      <url>/myblog.github.io/2021/03/18/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><p>参考笔记链接:<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MyBatis是操作数据库的， 相当于一个增强的JDBC, 用他来操作数据库比较简洁</p><h2 id="第一章-MyBatis-框架爱概述"><a href="#第一章-MyBatis-框架爱概述" class="headerlink" title="第一章 MyBatis 框架爱概述"></a>第一章 MyBatis 框架爱概述</h2><p>1.框架的概念, 相关知识点, 三层架构</p><p>2.MVC是做web开发的一种模式, M: 数据, V:视图, C:控制器</p><p>3.三层架构: </p><p>界面层(跟用户直接打交道的, 接受用户的请求参数, 比如有jsp,html,servlet), </p><p>业务逻辑层(接受界面层传过来的数据, 计算逻辑,调用数据库, 获取数据 比如service), </p><p>数据访问(和数据库进行打交道的, 对数据库进行访问,执行对数据的查询,修改,删除等等)</p><p>三层对应的包:</p><p>​    界面层: controller (servlet)</p><p>​    业务逻辑层: service 包(xxxservice 类)</p><p>​    数据访问层: dao包(xxxDao类)</p><p>三层中类的交互</p><p>​    用户使用界面层–&gt;业务逻辑层–&gt;数据访问层(持久层)–&gt;数据库</p><p>三层对应的处理框架</p><p>​    界面层—–servlet—-springmvc(现在用这个框架, 代替servlet来做界面层的功能)</p><p>​    业务逻辑层—-service类—–spring(框架, 用它来管理service中的这些类)</p><p>​    数据访问层—-dao类—–mybatis(框架, 用它来代替JDBC来访问数据库)</p><p>前两个规模比较大, 第三个比较简单小.</p><p>4.框架(半成品软件, 定义好了一些基础功能, 需要加入你的功能就是完善了, 基础功能是可重复使用的,可升级的)</p><p>​    框架是一个舞台, 一个模板(相当于你平时生活中填的各种表格, 设计出来以后你只需要照着内容填就可以了).  定义好了一些功能, 可加入自己的功能</p><p>​    每个公司都有自己的框架</p><p>​    模板: 1. 规定了好了一些自己的条款,内容   2.加入了自己的东西</p><p>​    特点: 1.框架一般不是全能的, 不能做所有事情  2.框架是针对某一个领域有效, 特长是在某一个方面.  比如MyBatis做数据库强, 但是他不能干别的</p><p>5.MyBatis 框架, 早期叫做ibatis,  代码在github上.   MyBatis是MyBatis sql Mapper Framework for java(sql 映射框架)</p><p>​    1)sql mapper : sql映射<br>​        可以把数据库表中的一行数据, 映射为一个Java对象.  一行数据可以看做是一个Java对象, 操作这个对象, 就相当于操作表中的数据</p><p>​    2)Data access Objects (DAOS) : 数据访问对象, 对数据库执行增删改查</p><p>MyBatis提供的功能: </p><p>​    1.提供了创建connection , statement, resultset 的能力 不用开发人员创建这些对象了</p><p>​    2.提供了执行sql语句的能力, 不用你执行sql</p><p>​    3.提供了循环sql, 把sql的结果转为Java对象, list集合的能力</p><p>​    4.提供了关闭资源的能力, 不用你关闭connection,statement, resultset</p><p>我们开发人员做的就是提供sql语句(站在巨人的肩膀上)</p><p>最后是: 开发人员提供sql语句—-MyBatis处理sql—开发人员得到list集合或者Java对象(表中数据)</p><p>总结: MyBatis是一个sql映射框架, 提供的数据的操作能力,增强的jdbc</p><h2 id="第二章-MyBatis-框架快速入门"><a href="#第二章-MyBatis-框架快速入门" class="headerlink" title="第二章 MyBatis 框架快速入门"></a>第二章 MyBatis 框架快速入门</h2><p>快速使用mybatis, 进行数据库的操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">从项目开始, 往pom.xml中的build中加东西实现一个查询数据库的功能</span><br><span class="line">实现的步骤:</span><br><span class="line"><span class="number">1.</span>在Navicat <span class="keyword">for</span> mysql中新建一个student的表</span><br><span class="line"><span class="number">2.</span>加入maven的MyBatis坐标, mysql的驱动坐标</span><br><span class="line"><span class="number">3.</span>创建实体类, student<span class="comment">-- 保存表中的一行数据</span></span><br><span class="line"><span class="number">4.</span>创建持久层(数据访问层)的dao接口, 定义操作数据库的方法</span><br><span class="line"><span class="number">5.</span>创建一个MyBatis使用的配置文件</span><br><span class="line">    叫做<span class="keyword">sql</span>映射文件: 写<span class="keyword">sql</span>语句的, 一般是一个表一个<span class="keyword">sql</span>映射文件</span><br><span class="line">    这个文件<span class="type">xml</span>文件</span><br><span class="line">    注意:这里的<span class="keyword">sql</span>映射文件写在接口所在的目录下.  同时文件的名称和接口保持一致</span><br><span class="line"><span class="number">6.</span>创建MyBatis的主配置文件</span><br><span class="line">    一个项目就一个主配置文件</span><br><span class="line">    主配置文件提供了数据库的连接信息和<span class="keyword">sql</span>映射文件的位置信息</span><br><span class="line"><span class="number">7.</span>创建使用MyBatis类</span><br><span class="line">    通过使用MyBatis访问数据库</span><br></pre></td></tr></table></figure><p>idea中的xml文件代码的注释方法仍然是Ctrl+/</p><p>1.pom.xml的依赖中添加MyBatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.加载mysql驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述操作之后最好右键pom.xml  Maven–&gt; reimport一遍  养成习惯, 手动更新一下</p><p>3.补充: 查看mysql的版本: mysql -V 我的版本是8.0.17</p><p>​    数据库连不上的原因:</p><ol><li>首先就检查驱动版本和mysql版本一不一致，如果是连公司的数据库基本不怎么会出现版本不一致的情况，但是本地测试就需要注意一个</li><li>检查路径、驱动、用户名和密码是否正确</li><li>mysql有没有grant权限，允许外部访问</li><li>还有可能是你的数据库崩了</li></ol><p>项目下生成APP是默认类, 不需要, 可以直接删除, test下面也有一个, 也可以删除</p><p>4.补充:</p><p>domain的概念，通常会分很多层，比如经典的三层架构，控制层、业务层、数据访问层（DAO），此外，还有一个层，就是domain层</p><p>domain层，通常就是用于放置这个系统中，与数据库中的表，一一对应起来的JavaBean的</p><p>model层：和domain区别；可能都是javaBean，</p><p>这个区别是用途不同，domain通常就代表了与数据库表–一一对应的javaBean,</p><p>model通常代表了不与数据库一一对应的javaBean，但是封装的数据是前端的JS脚本，需要使用的数据</p><p>5.补充</p><p>namespace是改接口的</p><p>6.代码</p><p><strong>StudentDao.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.liuxinjie.LXJ.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select: 表示查询操作</span></span><br><span class="line"><span class="comment">        id:你要执行的sql语法的唯一标识, id写接口方法名, MyBatis会使用这个id的值来找到要执行sql语句</span></span><br><span class="line"><span class="comment">            可以自定义, 但是要去你使用接口中的方法名称</span></span><br><span class="line"><span class="comment">        总结: namespace写接口类名,   id写方法名</span></span><br><span class="line"><span class="comment">        resulttype: 表示结果类型的, 是sql语句执行后得到的resultset, 遍历这个resultset得到的Java对象的类型</span></span><br><span class="line"><span class="comment">            它的值写的是类型的全限定名称(具体操作就是: 返回到Student类中, 选中类名Student, 右键选中copy reference)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.liuxinjie.LXJ.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student order by id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    sql映射文件: 写sql语句的, MyBatis会执行这些sql</span></span><br><span class="line"><span class="comment">    内容:</span></span><br><span class="line"><span class="comment">    1.指定约束文件的</span></span><br><span class="line"><span class="comment">        &lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      mybatis-3-mapper.dtd是约束文件的名称, 扩展名是dtd</span></span><br><span class="line"><span class="comment">    2.约束文件的作用: 限制和检查在当前文件中出现的标签, 属性必须符合MyBatis的要求</span></span><br><span class="line"><span class="comment">    3.mapper 是当前文件的根标签, 必须的.</span></span><br><span class="line"><span class="comment">        namespace: 叫做命名空间, 唯一值, 可以是自定义的字符串</span></span><br><span class="line"><span class="comment">                    要求你使用dao接口全限定名称.即com.liuxinjie.LXJ.dao.StudentDao   每个上层包都要写出来</span></span><br><span class="line"><span class="comment">    4.在当前文件中, 可以使用特定的标签, 表示数据库的特定操作</span></span><br><span class="line"><span class="comment">        &lt;select&gt;: 表示执行查询</span></span><br><span class="line"><span class="comment">        &lt;update&gt;: 表示更新数据库的操作, 就是在&lt;update&gt;标签中写的update sql语句</span></span><br><span class="line"><span class="comment">        &lt;insert&gt;: 表示插入, 放的是insert语句</span></span><br><span class="line"><span class="comment">        &lt;delete&gt;: 表示删除, 执行的是delete与</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Student.java</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.liuxinjie.LXJ.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuxinjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/22 022 13:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@software</span> IDEA</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.创建实体类, student-- 保存表中的一行数据</span></span><br><span class="line"><span class="comment"> * 推荐和表名一样容易记忆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">Integer</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">Integer</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>StudentDao.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.liuxinjie.LXJ.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select: 表示查询操作</span></span><br><span class="line"><span class="comment">        id:你要执行的sql语法的唯一标识, id写接口方法名, MyBatis会使用这个id的值来找到要执行sql语句</span></span><br><span class="line"><span class="comment">            可以自定义, 但是要去你使用接口中的方法名称</span></span><br><span class="line"><span class="comment">        总结: namespace写接口类名,   id写方法名</span></span><br><span class="line"><span class="comment">        resulttype: 表示结果类型的, 是sql语句执行后得到的resultset, 遍历这个resultset得到的Java对象的类型</span></span><br><span class="line"><span class="comment">            它的值写的是类型的全限定名称(具体操作就是: 返回到Student类中, 选中类名Student, 右键选中copy reference)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.liuxinjie.LXJ.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student order by id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    sql映射文件: 写sql语句的, MyBatis会执行这些sql</span></span><br><span class="line"><span class="comment">    内容:</span></span><br><span class="line"><span class="comment">    1.指定约束文件的</span></span><br><span class="line"><span class="comment">        &lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      mybatis-3-mapper.dtd是约束文件的名称, 扩展名是dtd</span></span><br><span class="line"><span class="comment">    2.约束文件的作用: 限制和检查在当前文件中出现的标签, 属性必须符合MyBatis的要求</span></span><br><span class="line"><span class="comment">    3.mapper 是当前文件的根标签, 必须的.</span></span><br><span class="line"><span class="comment">        namespace: 叫做命名空间, 唯一值, 可以是自定义的字符串</span></span><br><span class="line"><span class="comment">                    要求你使用dao接口全限定名称.即com.liuxinjie.LXJ.dao.StudentDao   每个上层包都要写出来</span></span><br><span class="line"><span class="comment">    4.在当前文件中, 可以使用特定的标签, 表示数据库的特定操作</span></span><br><span class="line"><span class="comment">        &lt;select&gt;: 表示执行查询</span></span><br><span class="line"><span class="comment">        &lt;update&gt;: 表示更新数据库的操作, 就是在&lt;update&gt;标签中写的update sql语句</span></span><br><span class="line"><span class="comment">        &lt;insert&gt;: 表示插入, 放的是insert语句</span></span><br><span class="line"><span class="comment">        &lt;delete&gt;: 表示删除, 执行的是delete与</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liuxinjie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>WebMybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--包括目录下的.properties.xml文件都会扫描到--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>10<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>10<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>mybatis.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环境配置:数据库的连接信息</span></span><br><span class="line"><span class="comment">        default： 必须和某个environment的id值一样</span></span><br><span class="line"><span class="comment">        告诉MyBatis使用哪个数据库的连接信息. 也就是访问哪个数据库</span></span><br><span class="line"><span class="comment">        即下面的default和id要一致</span></span><br><span class="line"><span class="comment">        因为每个environment代表一个数据库, 可能有多个id, 究竟连接哪个数据库, id就等于多少</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--environment : 一个数据库信息的配置, 环境</span></span><br><span class="line"><span class="comment">            id: 一个唯一值, 自定义, 表示环境的名称, 这里可以自定义, 随便取--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager: 表示MyBatis的事务类型</span></span><br><span class="line"><span class="comment">                    type:JDBC(表示使用jdbc中的connection对象commit,rollback做事务处理)</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                datasource: 表示数据源, 连接数据库的</span></span><br><span class="line"><span class="comment">                   type: 表示数据源的类型, POOLED表示使用连接池</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--下面这四个表示连接数据库的具体信息的</span></span><br><span class="line"><span class="comment">                    --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--数据库的驱动类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url字符串--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test1?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--访问数据库用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;533533&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql mapper(sql映射文件的位置)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一个mapper 标签自定一个文件的位置</span></span><br><span class="line"><span class="comment">            从类路径开始的路径信息</span></span><br><span class="line"><span class="comment">            即: target/classes下面的路径, 把target/classes这个头去掉</span></span><br><span class="line"><span class="comment">            target文件只有编译(右边maven下lifecycle下compile)了才有</span></span><br><span class="line"><span class="comment">            也可以直接拷贝Java下面的StudentDao.xml的路径, 然后将com.前面的路径去掉即可</span></span><br><span class="line"><span class="comment">            为什么要找这个路径, 因为这个文件中有sql语句的出现</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/liuxinjie/LXJ/dao/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/liuxinjie/LXJ/dao/SchoolDao.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/liuxinjie/LXJ/dao/DeptDao.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里的可以写多个, 因为可能有不同的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    文件介绍: MyBatis的主配置文件, 主要定义了数据库的配置信息, sql映射文件的位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.约束文件</span></span><br><span class="line"><span class="comment">    &lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment">    mybatis-3-config.dtd: 约束文件的名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.configuration 根标签</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三章-MyBatis-Dao代理-重点"><a href="#第三章-MyBatis-Dao代理-重点" class="headerlink" title="第三章 MyBatis Dao代理(重点)"></a>第三章 MyBatis Dao代理(重点)</h2><p>mybatis的各种用法</p><h2 id="第四章-MyBatis-动态SQL-重点"><a href="#第四章-MyBatis-动态SQL-重点" class="headerlink" title="第四章 MyBatis 动态SQL(重点)"></a>第四章 MyBatis 动态SQL(重点)</h2><p>动态拼接</p><h2 id="第五章-MyBatis-配置文件"><a href="#第五章-MyBatis-配置文件" class="headerlink" title="第五章 MyBatis 配置文件"></a>第五章 MyBatis 配置文件</h2><p>了解</p><h2 id="第六章-MyBatis-扩展"><a href="#第六章-MyBatis-扩展" class="headerlink" title="第六章 MyBatis 扩展"></a>第六章 MyBatis 扩展</h2><p>pagehelp, 做数据分页</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC(能够对数据库进行增删改查)</title>
      <link href="/myblog.github.io/2021/03/18/JDBC%E7%AC%94%E8%AE%B0/"/>
      <url>/myblog.github.io/2021/03/18/JDBC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java语言连接数据库-JDBC"><a href="#Java语言连接数据库-JDBC" class="headerlink" title="Java语言连接数据库(JDBC)"></a>Java语言连接数据库(JDBC)</h1><p>笔记连接:<a href="https://blog.csdn.net/qq_43649223/article/details/106755584">https://blog.csdn.net/qq_43649223/article/details/106755584</a></p><p>参考连接:<a href="https://blog.csdn.net/upup1006/article/details/95470945">https://blog.csdn.net/upup1006/article/details/95470945</a></p><h2 id="1-JDBC-Java-database-connectivity"><a href="#1-JDBC-Java-database-connectivity" class="headerlink" title="1.JDBC: Java database connectivity"></a>1.JDBC: Java database connectivity</h2><h2 id="2-jdbc-的本质"><a href="#2-jdbc-的本质" class="headerlink" title="2.jdbc 的本质"></a>2.jdbc 的本质</h2><p>jdbc是sun公司制定的一套<strong>接口</strong>, 接口都有调用者和实现者.  面向接口调用, 面向接口写实现类, 这都属于面向接口编程</p><p>为什么要面向接口编程?  解耦合: 降低程序的耦合度, 提高程序的扩展力. 多态机制就是非常典型的: 面向抽象编程. (不要面向具体编程)</p><h2 id="3-为什么SUN制定一套接口"><a href="#3-为什么SUN制定一套接口" class="headerlink" title="3.为什么SUN制定一套接口?"></a>3.为什么SUN制定一套接口?</h2><p>因为每一个数据库的底层实现原理都不一样. oracle mysql MSserver 数据库都有自己的独特的实现原理</p><p>定义一套接口, 所有数据库厂家的Java程序员都按照这套接口去写实现类.   我们面向jdbc接口编程</p><h2 id="4-驱动"><a href="#4-驱动" class="headerlink" title="4.驱动"></a>4.驱动</h2><p>驱动:所有的数据库驱动都是以jar包的形式存在的,jar 中有很多.class文件, 这些class文件就是对jdbc接口的实现.    驱动都是接口的实现类.</p><p>驱动不是sun公司提供的, 而是各大数据库厂家负责提供,下载驱动jar包, 需要去数据库官网下载.</p><h2 id="5-模拟SUN-数据库厂家-我们角色"><a href="#5-模拟SUN-数据库厂家-我们角色" class="headerlink" title="5.模拟SUN 数据库厂家  我们角色"></a>5.模拟SUN 数据库厂家  我们角色</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java程序员</span></span><br><span class="line"><span class="comment"> * 不需要关系具体是哪个品牌的数据库, 只需要面向jdbc接口写代码</span></span><br><span class="line"><span class="comment"> * 面向接口编程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> JavaProgrammer &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws Exception &#123;</span><br><span class="line"><span class="comment">//        JDBC jdbc=new MySql();</span></span><br><span class="line"><span class="comment">//        JDBC jdbc1=new SqlServer();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象可以通过反射机制</span></span><br><span class="line">        ResourceBundle bundle=<span class="module-access"><span class="module"><span class="identifier">ResourceBundle</span>.</span></span>get<span class="constructor">Bundle(<span class="string">&quot;jdbc&quot;</span>)</span>;</span><br><span class="line">        String className=bundle.get<span class="constructor">String(<span class="string">&quot;className&quot;</span>)</span>;</span><br><span class="line">        Class clazz = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span><span class="keyword">for</span><span class="constructor">Name(<span class="params">className</span>)</span>;</span><br><span class="line">        JDBC jdbc=(JDBC)clazz.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line">        jdbc.get<span class="constructor">Connection()</span>;</span><br><span class="line"><span class="comment">//        jdbc1.getConnection();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlServer</span>  <span class="keyword">implements</span> <span class="title">JDBC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接SqlServer数据库成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">className</span>=MySql</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySql</span> <span class="keyword">implements</span> <span class="title">JDBC</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//具体这里怎么写, 对于我们来说没有关系</span></span><br><span class="line">            <span class="comment">//这段代码涉及到mysql底层数据库的实现原理</span></span><br><span class="line">            System.out.println(<span class="string">&quot;连接mysql数据库成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sun 公司负责制定的JDBC接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">JDBC</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接数据库的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="built_in">void</span> getConnection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-JDBC开发前的准备工作"><a href="#6-JDBC开发前的准备工作" class="headerlink" title="6.JDBC开发前的准备工作"></a>6.JDBC开发前的准备工作</h2><p>先从官网下载对应的驱动jar包, 然后将其配置到环境变量classpath中</p><p>idea不需要这么配置, idea自动完成</p><h2 id="7-JDBC编程六步的概述-需要背会"><a href="#7-JDBC编程六步的概述-需要背会" class="headerlink" title="7.JDBC编程六步的概述(需要背会)"></a>7.JDBC编程六步的概述(需要背会)</h2><p>1.注册驱动(作用: 告诉Java程序,即将要连接的是哪个品牌的数据库)</p><p>2.获取连接(作用: 表示jvm的进程和数据库之间的通道打开了, 这属于进程之间的通信, 重量级, 使用完之后一定要关闭通道)</p><p>3.获取数据库操作对象(专门执行SQL语句的对象)</p><p>4.执行SQL语句(DQL,DML…)</p><p>5.处理查询结果集(只有当第四步执行的是select语句的时候,才有第五步处理查询的结果集)</p><p>6.释放资源(使用完资源之后一定要关闭资源,Java和数据库属于进程间的通信,开启之后一定要关闭)</p><p>学完jdbc, 下一站学框架</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/hashmap/"/>
      <url>/myblog.github.io/2021/03/18/hashmap/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/myblog.github.io/2021/03/18/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/SpringBoot%E7%AC%94%E8%AE%B0/"/>
      <url>/myblog.github.io/2021/03/18/SpringBoot%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven配置</title>
      <link href="/myblog.github.io/2021/03/18/maven%E9%85%8D%E7%BD%AE/"/>
      <url>/myblog.github.io/2021/03/18/maven%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><h2 id="1-maven简介"><a href="#1-maven简介" class="headerlink" title="1.maven简介"></a>1.maven简介</h2><p>一种项目的管理工具, Maven主要是进行开发包的管理.   </p><p>我们对于这些开发包的引用，最初的做法：下载下来*.jar文件，而后在需要的地方拷贝到项目的WEB-INF/lib目录之中就可以使用了，但是这种方式很多时候并不方便，如果说现在开发包的版本很多。</p><p>所以为了解决这样的问题，专门由Apache提供了一个开发包的工具管理—–Maven<br>Maven除了开发包管理之外还可具备项目的编译、测试等功能。</p><p>在整个的Maven之中，对于所有的开发包管理实际上都是依靠了一个pom.xml文件完成的，这个文件可以实现开发包的版本切换，当然也可以进行一些连接的配置，或者是项目子模块的配置。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令:"></a>命令:</h2><ol><li><p>mvn -v  查看meavn的版本号</p></li><li><p>我的Java版本是1.8.0_131</p><p>Maven home: D:\apache-maven-3.5.2\bin..<br>Java version: 1.8.0_131, vendor: Oracle Corporation<br>Java home: D:\Program Files\Java\jdk1.8.0_131\jre</p></li><li><p>D:\apache-maven-3.5.2\conf 目录先有setting.xml</p></li><li><p>D:\apache-maven-3.5.2\repository</p></li><li><p><a href="https://blog.csdn.net/qq_41113081/article/details/89074169?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_41113081/article/details/89074169?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242</a>    在IDEA中使用MyBatis的教程</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pom.xml文件详解</title>
      <link href="/myblog.github.io/2021/03/18/pom_xml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/myblog.github.io/2021/03/18/pom_xml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Maven之pom-xml配置文件详解"><a href="#1-Maven之pom-xml配置文件详解" class="headerlink" title="1.Maven之pom.xml配置文件详解"></a>1.Maven之pom.xml配置文件详解</h2><p><a href="https://blog.csdn.net/qq_33363618/article/details/79438044">https://blog.csdn.net/qq_33363618/article/details/79438044</a></p><h2 id="2-maven配置总结-pom-xml和settings-xml"><a href="#2-maven配置总结-pom-xml和settings-xml" class="headerlink" title="2.maven配置总结(pom.xml和settings.xml)"></a>2.maven配置总结(pom.xml和settings.xml)</h2><p><a href="https://blog.csdn.net/zjy_love_java/article/details/102734248?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/zjy_love_java/article/details/102734248?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><h2 id="3-build-里面的内容"><a href="#3-build-里面的内容" class="headerlink" title="3. build 里面的内容"></a>3. build 里面的内容</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/Hello-LXJ/"/>
      <url>/myblog.github.io/2021/03/18/Hello-LXJ/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/redis/"/>
      <url>/myblog.github.io/2021/03/18/redis/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/"/>
      <url>/myblog.github.io/2021/03/18/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
      <url>/myblog.github.io/2021/03/18/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92(%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98)/"/>
      <url>/myblog.github.io/2021/03/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92(%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98)/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/"/>
      <url>/myblog.github.io/2021/03/18/%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大学生发期刊</title>
      <link href="/myblog.github.io/2021/03/18/%E5%8F%91%E6%9C%9F%E5%88%8A%E6%AD%A5%E9%AA%A4/"/>
      <url>/myblog.github.io/2021/03/18/%E5%8F%91%E6%9C%9F%E5%88%8A%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p>第一步：写。你得把论文写出来，这是关键，没有论文是不可能发表的，您说对吧。但是写论文也是有技巧的，简单来说，就是专业知识+一定的技巧。专业知识不用说了，就是平时你学习、生活、工作中积累的知识、素材。技巧就是指选题立意，甚至格式、图表的制作等，都需要一定地技巧。这个只能在平时多学习，靠一时的指点是不行的。</p><p>第二步：投。写完论文后投稿。投稿就有技巧可言了，甚至直接关系到论文是否被录用。这里需要注意几个问题，一是明确需要发表期刊的级别，因为级别越高，越难发表，在中国，期刊按大类可分为普通期刊和核心期刊。但按我们公司十年的经验来看，中国的期刊按发表难易程度可分为下面几类，给钱就发的（以名字不好听的垃圾期刊、假刊为代表），需要审核但基本都能过的（以对外承包的期刊为代表），需要审核但过稿率不太高的（以比较难发的普刊为代表）、过稿率非常低，审核在半月左右的（以高端普刊，例如本科学报为代表）、极难发表的（以核心期刊为代表）。如果本科生来发表，一定要弄清自己为什么要发表，即自己发表的目的。是为了评奖学金？以后保研，还是单纯学术爱好。如果是前两项，我们称之为功利性发表的，那么，非常简单，直接把自己学校的文件找出来，找到符合学校标准的期刊，然后投最好录用的一个，如果学术爱好等，那么就认真选期刊吧。说的比较多了，这一块技巧比较多，可以私信或留言，大家继续交流。</p><p>第三步：录。即投稿被录用。但大家并要注意一个问题，并不是你投稿了就一定能录用，不录用的情况也非常多。如果录用之后并不是就能高枕无忧了，并不是，后期还有修改、排版定稿后的核实、版面费等，有的还要授权书、版权证明书之类的，所以，一定要经常和编辑沟通，争取早日收到杂志。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E4%B9%8B%E7%B1%BB%E7%9A%84/"/>
      <url>/myblog.github.io/2021/03/18/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E4%B9%8B%E7%B1%BB%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/myblog.github.io/2021/03/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/myblog.github.io/2021/03/18/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93mysql/"/>
      <url>/myblog.github.io/2021/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93mysql/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程小技巧</title>
      <link href="/myblog.github.io/2021/03/18/%E7%BC%96%E7%A8%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/myblog.github.io/2021/03/18/%E7%BC%96%E7%A8%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-可以尝试下载一个-jdk-API-1-8-0中文-帮助文档"><a href="#1-可以尝试下载一个-jdk-API-1-8-0中文-帮助文档" class="headerlink" title="1.可以尝试下载一个 jdk API 1.8.0中文 帮助文档"></a>1.可以尝试下载一个 jdk API 1.8.0中文 帮助文档</h2><h2 id="2-驱动就是一个jar包"><a href="#2-驱动就是一个jar包" class="headerlink" title="2.驱动就是一个jar包"></a>2.驱动就是一个jar包</h2><h2 id="3-Navicat-for-mysql的使用"><a href="#3-Navicat-for-mysql的使用" class="headerlink" title="3.Navicat for mysql的使用"></a>3.Navicat for mysql的使用</h2><h3 id="3-1-建立连接"><a href="#3-1-建立连接" class="headerlink" title="3.1 建立连接"></a>3.1 建立连接</h3><p>启动Navicat for mysql    步骤: 1.任务管理器的服务里面找到mysql80  将服务启动</p><p>mysql的默认端口为3306 建议不要改,  然后连接名, 主机名或者IP地址,用户名root不改, 密码是可以自己更改的</p><p>不过这样会报错, 打开cmd输入以下语句</p><p>mysql -u root -p 登录</p><p>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘533533’;</p><p>FLUSH PRIVILEGES; #刷新权限</p><p>在建立连接就可以了;</p><h3 id="3-2-在连接下面建立数据库"><a href="#3-2-在连接下面建立数据库" class="headerlink" title="3.2 在连接下面建立数据库"></a>3.2 在连接下面建立数据库</h3><ul><li><strong>字符集建议选择 UTF-8 ，如果你数据库里不存汉字可选择其他选项</strong></li><li><strong>排序规则就选择第一个 utf8_general_ci 就可以了</strong></li></ul><p>然后就可以开始增删改查了</p><h3 id="3-3-数据库的远程连接"><a href="#3-3-数据库的远程连接" class="headerlink" title="3.3 数据库的远程连接"></a>3.3 数据库的远程连接</h3><p><a href="https://blog.csdn.net/qq_37321253/article/details/80728844?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-1-80728844.pc_agg_rank_aggregation&amp;utm_term=%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E5%AF%B9%E6%96%B9%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1000.2123.3001.4430">https://blog.csdn.net/qq_37321253/article/details/80728844?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-1-80728844.pc_agg_rank_aggregation&amp;utm_term=%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E5%AF%B9%E6%96%B9%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1000.2123.3001.4430</a></p><h3 id="3-4-在idea中添加jar包-在工程目录下新建lib-将包放在里面-右键lib选择-add-as-Library"><a href="#3-4-在idea中添加jar包-在工程目录下新建lib-将包放在里面-右键lib选择-add-as-Library" class="headerlink" title="3.4 在idea中添加jar包, 在工程目录下新建lib, 将包放在里面, 右键lib选择 add as  Library"></a>3.4 在idea中添加jar包, 在工程目录下新建lib, 将包放在里面, 右键lib选择 add as  Library</h3><h3 id="3-5-lombok"><a href="#3-5-lombok" class="headerlink" title="3.5 lombok"></a>3.5 lombok</h3><p>在编译的时候会自动生成getters and setters</p><p>虽然有人可能会说IDE里面都自带自动生成这些方法的功能，但是使用lombok会使你的代码看起来更加简洁，写起来也更加方便。</p><p>如何在项目中使用：首先在pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完依赖后还需要下载一个插件，我是在IDEA中下载的，点file–Sttings–Plugins，然后再搜索lombok下载安装即可</p><p>还提供了一些其他注解</p><p>​     @Data  ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法</p><p>​    @Setter：注解在属性上；为属性提供 setting 方法</p><p>​    @Getter：注解在属性上；为属性提供 getting 方法</p><p>   @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</p><p>   @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法</p><p>​    @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法</p><p>我们已经学习了@Getter/@Setter，@ToString，@EqualsAndHashCode，@RequiredArgsConstructor等注解，这个几个注解通常都是一个实体类所需要的。如果为每一个类都去加上这四个注解会有点麻烦，所以Lombok给出了一个注解用来表示这个四个注解，它就是@Data。使用了@Data后，这四个注解的注解属性都会采用默认值，即无法为其中某个注解指定该注解的注解属性值。如果要指定某个注解的注解属性值，需要开发者显示地指定。</p><p><a href="https://blog.csdn.net/tzs_1041218129/article/details/78995848?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/tzs_1041218129/article/details/78995848?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-接口注意事项"><a href="#3-5-接口注意事项" class="headerlink" title="3.5 接口注意事项"></a>3.5 接口注意事项</h3><p>接口也可以有静态方法和方法体; 1.8有默认方法,可以有方法体</p><h3 id="3-6-mysql-5-x-与8-x"><a href="#3-6-mysql-5-x-与8-x" class="headerlink" title="3.6 mysql 5.x 与8.x"></a>3.6 mysql 5.x 与8.x</h3><ol><li><p>5.0.X版本连接的驱动地址为：”com.mysql.jdbc.Driver”，而8.0.X版本的更改为：”com.mysql.cj.jdbc.Driver”</p></li><li><p>建立连接时url增加了一些参数： 5.0.X版本的url为String url = “jdbc:mysql://localhost:3306/student”</p><p>而8.0.X版本的需要在后面加上一串字母变为：String url = “jdbc:mysql://local:3306/student?&amp;useSSL=false&amp;serverTimezone=UTC”</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20181122181908100.png" alt="img"></p><p>&amp;符号报错解决办法:</p><p><a href="https://blog.csdn.net/u012325167/article/details/51114224?utm_source=blogxgwz2">https://blog.csdn.net/u012325167/article/details/51114224?utm_source=blogxgwz2</a></p><ol><li>MySQL在高版本需要指明是否进行SSL连接</li></ol><p>(保障Internet数据传输安全利用数据加密)需要在url后面添加useSSL=true或者false不然在运行时控制台会出现红色警告。</p><p>useSSL=true 需要连接</p><p>useSSL=false 不需要连接</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>西南交大考研信息收录</title>
      <link href="/myblog.github.io/2021/03/18/%E8%A5%BF%E5%8D%97%E4%BA%A4%E5%A4%A7%E8%80%83%E7%A0%94%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/myblog.github.io/2021/03/18/%E8%A5%BF%E5%8D%97%E4%BA%A4%E5%A4%A7%E8%80%83%E7%A0%94%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>西南交大:现有九里、犀浦、峨眉三个校区，占地5000余亩，犀浦校区为主校区。</strong></p><h2 id="考试科目"><a href="#考试科目" class="headerlink" title="考试科目:"></a>考试科目:</h2><p>(101)思想政治理论</p><p>(201)英语一</p><p>(301)数学一</p><p>(840)数据结构与程序设计   1.《数据结构》(C语言版)严蔚敏，吴伟民编，清华大学出版社2.《C语言程序设计》 宁爱军编，人民邮电出版社 第2版</p><h2 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h2><ol><li><p>计算机应用技术</p></li><li><p>计算机软件与理论</p></li><li><p>计算机网络与信息安全</p></li><li><p>产业链协同与信息化支撑技术</p></li><li><p>大数据与云计算技术</p></li><li><p>人工智能与机器学习技术</p></li><li><p>图形图像与视频处理技术</p></li></ol><h2 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h2><p>数据结构,算法,计算机组成原理,操作系统,计算机网络</p><h2 id="西南交大学硕"><a href="#西南交大学硕" class="headerlink" title="西南交大学硕"></a>西南交大学硕</h2><p>信息科学与技术学院</p><p>计算机科学与技术</p><p>总分345</p><p>科目一37</p><p>科目二37</p><p>科目三56</p><p>科目四56</p><p>西南交通大学信息学院累计报考人数高达6074人，其中专硕高达4992人！总录取人数约200人，高达1比25！</p><p>有46人保研，剩余名额150人左右，还不到25比1</p><p><a href="https://www.zhihu.com/question/362864036">https://www.zhihu.com/question/362864036</a></p><p>西南交大备考攻略</p><p><a href="https://zhuanlan.zhihu.com/p/270941781">https://zhuanlan.zhihu.com/p/270941781</a></p><p>西南交大计算机在第四轮学科评估中评为B+，计算机实力在西南地区和四川大学、重庆大学属于同一档次。</p><p>学硕计算机+软工考研大概可考名额三十多个，专硕计算机+软工考研大概可考五十多个。学硕考政治、英一、数一、840专业课，专硕考政治、英二、数二、840专业课。学习内容上学硕肯定比专硕多且难，招生也比专硕少，但实际竞争程度上可能比专硕还要低一些，主要是因为想考专硕学生多。</p><p>复试线学硕大概浮动在330-340之间，专硕浮动在340-360之间。</p><p>报录比这块我没去关心，因为大家也清楚各个学校计算机都是大热门，211学校计算机报录比不会低，大致知道就行了，不必细究。</p><h2 id="研究生复试"><a href="#研究生复试" class="headerlink" title="研究生复试"></a>研究生复试</h2><p>１.(英)你有事吗兴趣爱好？</p><p>２．你读过哪些英文文献？</p><p>３．毕设相关</p><p>４.(英)自我介绍：　说说你的家乡，　家乡气候</p><p>５．描述一下快速排序</p><p>６．数组和线性表的区别与联系，　物理结构和逻辑结构具体指事吗？有什么区别，毕设相关</p><p>７.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>哈哈,啥也不是!</title>
      <link href="/myblog.github.io/2021/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E8%AF%86/"/>
      <url>/myblog.github.io/2021/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>1.工资算法&gt;后端&gt;客户端&gt;前端&gt;测开&gt;软件测试</p><p>2.字节工资是最高的, 字节官方是22k, 字节的槽点确实是发展太快 流程略显不规范.   并不是身体轻松, 技术轻松    字节对新人能友好些</p><p>3.感觉阿里不太行，听说官僚化有点严重,等级森严</p><p>4.做个需求要同时把前端，后端，测试，运营的leader全部叫上</p><p>5.前后端的leader是一个</p><p>6.腾讯钱有点少 我看了下offershow, 腾讯白菜好像30左右</p><p>7.都是我最喜欢的dfs</p><p>8.研究生要求比较高</p><p>9.阿里不看重笔试</p><p>10.做业务太无聊了，真的，我现在技术越来越烂了，甚至有点不会写代码了</p><p>11.在字节内网, 很简单啊，你搜个字节跳动秋招面试题库</p><p>12.进字节我感觉要么做算法，要么就做抖音，头条的核心业务</p><p>13.归并也是dfs</p><p>14.研发岗位和后端岗位的企业招聘需求: 从工作年限上看, 后端需要3-4的经验, 研发则需要5年及以上; 同时薪资起点不同![-524b6ddf92466a50](D:\Tencent Files\484671483\FileRecv\MobileFile-524b6ddf92466a50.png)</p><p>![22b2629317d1dc02](D:\Tencent Files\484671483\FileRecv\MobileFile\22b2629317d1dc02.png)![-35c803579096913e](D:\Tencent Files\484671483\FileRecv\MobileFile-35c803579096913e.png)</p><p>![3f5b958b747e8f30](D:\Tencent Files\484671483\FileRecv\MobileFile\3f5b958b747e8f30.png)</p><p>15.Java繁琐的不是语言而是生态圈, 生态圈丰富, 太老比如:struts,jsp;  Java最大的劣势就是生态圈太老, 文档太难看</p><p>16.go没有jvm, 更适合微服务,Java的jvm已启动就是200MB, go有函数指针,Java所有的代码都必须写到类里面,灵活性差一点</p><ol start="17"><li><p>C++ 不需要新人, 太难了.   </p></li><li><p>Java和C#基本一样</p></li><li><p>redis就是一个带持久化的内存缓存而已, redis重点在部署和性能测试, 现在已经不会单独的使用redis了, 因为单单的redis功能有限, 比如你想用redis限制mysql写入的上限什么的, 都是用的spring cloud这样的分布式框架</p></li><li><p>成都租房子, 单间合租6-800</p></li><li><p>如何看待实验室老师不让学生实习,考编,考公,以及找工作, 必须在实验室搞科研: 回答: 本质上是内卷严重, 学历不值钱, 本科生找不到工作只能继续读研究生, 导致虽然叫研究生, 但学生不想研究只想缓几年再找工作, 这就导致了学生和老师的目标矛盾</p></li><li><p>机器学习 深度学习</p><p>1.魔改结构  2.疯狂调参找出最好的结果 3.瞎编解释说自己的改造是有物理意义的  4.论文到手        论文读多了就会发现, 很多论文的改进点很扯淡, 但是他们都会提供一个看起来提高了效果, 但是你实践会发现他就是挑出了一个最大值</p></li><li><p>核心甚至顶会一般会找同领域的审稿人, 他们会看你论文的创新性和工作量.  稍微改了一点代码发论文的, 但是那种一般情况下人家改了之后效果提示明显, 而且在论文里做了相关理论分析,论述了为什么这样改了之后性能大幅提升</p></li><li><p>炒股公司做AI, 但是目前人工智能是数据驱动范式的, 个人连数据都拿不到, 做了效果肯定也上不去, 凭你算法多牛,都不行.</p></li><li><p>研究生出来和本科没什么区别.</p></li><li><p>要想找工作的话,一个合格的Java程序员必须学会用框架和会看源码, 了解底层原理.具体技能方面, 面试经常会被问到: 1. SpringBoot, spring cloud  2. redis(这个不懂直接pass)  3.消息中间件(三大主流的)  4.数据库的查询优化   5.jvm调优</p></li><li><p>小厂没资源没氛围, 大厂有资源有氛围.</p></li><li><p>面试造汉姆, 工作拧螺丝</p></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1.深圳钱深圳花, 一分也别想带回家.</p><p>2.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刘鑫杰博客</title>
      <link href="/myblog.github.io/2021/03/18/%E9%9D%A2%E7%BB%8F%E5%87%86%E5%A4%87/"/>
      <url>/myblog.github.io/2021/03/18/%E9%9D%A2%E7%BB%8F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<p> Humans are HOOKED. Machines are LEARNING.</p><p>Go for it! And I will form a good habit from then on.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
